# ========================================
# === IMPORTACIONES NECESARIAS ==========
# ========================================
import os
import re
import sys
import unicodedata
import base64
from pathlib import Path
from collections import defaultdict

import pandas as pd
from textblob import TextBlob

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
from tabulate import tabulate

# ========================================
# === CONFIGURACI√ìN DE STREAMLIT PAGE ===
# ========================================
st.set_page_config(layout="wide")

# ========================================
# === FUNCIONES DE SOPORTE ==============
# ========================================

def corregir_nombre(nombre):
    correcciones = {
        "DanielaLancheros": "Daniela Lancheros",
        "EdwinMiranda": "Edwin Miranda",
        "LuisaReyes": "Luisa Reyes",
        "MayerlyAcero": "Mayerly Acero",
        "NancyMoreno": "Nancy Moreno",
        "NicolasTovar": "Nicolas Tovar",
        "johan": "Johan",
        "NoseEntiendelenombredelasesor": "Desconocido",
        "NoSeEscucha": "Desconocido",
        "NotieneNombre": "Desconocido"
    }
    nombre_str = str(nombre).strip() if pd.notna(nombre) else ''
    return correcciones.get(nombre_str, nombre_str)

def get_image_base64(image_path):
    try:
        with open(image_path, "rb") as f:
            return base64.b64encode(f.read()).decode()
    except Exception:
        return None

def insetCodigo():
    col1, col2 = st.columns(2)
    img_height = "150px"
    img_style = f"height: {img_height}; object-fit: contain; margin: auto; display: block;"
    with col1:
        img1_base64 = get_image_base64(logoCun)
        if img1_base64:
            st.markdown(f'<img src="data:image/png;base64,{img1_base64}" style="{img_style}"/>', unsafe_allow_html=True)
        else:
            st.warning(f"‚ö†Ô∏è Logo CUN no encontrado en: {logoCun}")
    with col2:
        img2_base64 = get_image_base64(logoCltiene)
        if img2_base64:
            st.markdown(f'<img src="data:image/png;base64,{img2_base64}" style="{img_style}"/>', unsafe_allow_html=True)
        else:
            st.warning(f"‚ö†Ô∏è Logo Cltiene no encontrado en: {logoCltiene}")

# ========================================
# === RUTAS RELATIVAS ====================
# ========================================
carpeta_base = Path(".")
logoCun = carpeta_base / "CUN-1200X1200.png"
logoCltiene = carpeta_base / "clTiene2.jpeg"

ruta_archivo_reporte_puntaje = carpeta_base / "reporte_llamadas_asesores.xlsx"
ruta_archivo_sentimientos = carpeta_base / "sentimientos_textblob.xlsx"
nombre_archivo_reporte_acordeon = "acordon1.xlsx"
nombre_archivo_resultado_llamada_directo = "resultados_llamadas_directo.xlsx"
ruta_archivo_reporte_acordeon = carpeta_base / nombre_archivo_reporte_acordeon
puntejeAcordeoneros = carpeta_base / nombre_archivo_resultado_llamada_directo
resumen_llamadita = carpeta_base / "resumen_llamadas.xlsx"

# ========================================
# === CARGA DE DATAFRAMES ===============
# ========================================
try:
    df_puntajeAsesores = pd.read_excel(ruta_archivo_reporte_puntaje)
    if 'asesor' in df_puntajeAsesores.columns:
        df_puntajeAsesores['asesor'] = df_puntajeAsesores['asesor'].apply(corregir_nombre)
except FileNotFoundError:
    st.error(f"‚ùå No se encontr√≥ el archivo de Puntajes: {ruta_archivo_reporte_puntaje}")
    df_puntajeAsesores = pd.DataFrame()
except Exception as e:
    st.error(f"‚ùå Error al cargar puntajes desde '{ruta_archivo_reporte_puntaje}': {e}")
    df_puntajeAsesores = pd.DataFrame()

try:
    df_POlaVssub = pd.read_excel(ruta_archivo_sentimientos)
    if 'asesor' in df_POlaVssub.columns:
        df_POlaVssub['asesor'] = df_POlaVssub['asesor'].apply(corregir_nombre)

    if 'sentimiento_promedio_polaridad' in df_POlaVssub.columns:
        df_POlaVssub.rename(columns={'sentimiento_promedio_polaridad': 'polarity'}, inplace=True)
        if 'subjectivity' not in df_POlaVssub.columns:
            df_POlaVssub['subjectivity'] = 0.5
    elif 'polarity' not in df_POlaVssub.columns:
        st.error(f"‚ùå El archivo '{ruta_archivo_sentimientos.name}' no tiene las columnas de polaridad esperadas.")
        df_POlaVssub = pd.DataFrame()
except FileNotFoundError:
    st.error(f"‚ùå No se encontr√≥ el archivo de Sentimientos: {ruta_archivo_sentimientos}")
    df_POlaVssub = pd.DataFrame()
except Exception as e:
    st.error(f"‚ùå Error al cargar sentimientos desde '{ruta_archivo_sentimientos}': {e}")
    df_POlaVssub = pd.DataFrame()

try:
    df_acordeon = pd.read_excel(puntejeAcordeoneros)
    if 'asesor' in df_acordeon.columns:
        df_acordeon['asesor'] = df_acordeon['asesor'].apply(corregir_nombre)
except FileNotFoundError:
    st.error(f"‚ùå No se encontr√≥ el archivo de Acordeon: {puntejeAcordeoneros}.")
    df_acordeon = pd.DataFrame()
except Exception as e:
    st.error(f"‚ùå Error al cargar acordeon desde '{puntejeAcordeoneros}': {e}")
    df_acordeon = pd.DataFrame()

try:
    df_resumen = pd.read_excel(resumen_llamadita)
    df_resumen['asesor'] = df_resumen['asesor'].apply(corregir_nombre)
except FileNotFoundError:
    st.error(f"‚ö†Ô∏è No se encontr√≥ el archivo resumen: {resumen_llamadita}")
    df_resumen = pd.DataFrame()
except Exception as e:
    st.error(f"‚ö†Ô∏è Ocurri√≥ un error al leer el archivo resumen: {e}")
    df_resumen = pd.DataFrame()

try:
    resultados_llamadas_directo = pd.read_excel(ruta_archivo_reporte_puntaje)
    print(f"Archivo {ruta_archivo_reporte_puntaje.name} importado correctamente.")
    print(tabulate(resultados_llamadas_directo.head(), headers='keys', tablefmt='psql'))
except FileNotFoundError:
    print(f"No se encontr√≥ el archivo: {ruta_archivo_reporte_puntaje}")
    resultados_llamadas_directo = pd.DataFrame()
except Exception as e:
    print(f"Error al importar el archivo {ruta_archivo_reporte_puntaje.name}: {e}")
    resultados_llamadas_directo = pd.DataFrame()

try:
    acordeonYesid = pd.read_excel(ruta_archivo_reporte_acordeon)
    st.success(f"Archivo {nombre_archivo_reporte_acordeon} cargado correctamente.")
except FileNotFoundError:
    st.error(f"No se encontr√≥ el archivo: {nombre_archivo_reporte_acordeon}")
    acordeonYesid = pd.DataFrame()
except Exception as e:
    st.error(f"Error cargando {nombre_archivo_reporte_acordeon}: {e}")
    acordeonYesid = pd.DataFrame()



# ========================================
# === FUNCIONES DE SOPORTE ==============
# ========================================
def get_image_base64(image_path):
    try:
        with open(image_path, "rb") as f:
            return base64.b64encode(f.read()).decode()
    except Exception:
        return None

def insetCodigo():
    col1, col2 = st.columns(2)
    img_height = "150px"
    img_style = f"height: {img_height}; object-fit: contain; margin: auto; display: block;"
    with col1:
        img1_base64 = get_image_base64(logoCun)
        if img1_base64:
            st.markdown(f'<img src="data:image/png;base64,{img1_base64}" style="{img_style}"/>', unsafe_allow_html=True)
        else:
             st.warning(f"‚ö†Ô∏è Logo CUN no encontrado en: {logoCun}")
    with col2:
        img2_base64 = get_image_base64(logoCltiene)
        if img2_base64:
            st.markdown(f'<img src="data:image/png;base64,{img2_base64}" style="{img_style}"/>', unsafe_allow_html=True)
        else:
            st.warning(f"‚ö†Ô∏è Logo Cltiene no encontrado en: {logoCltiene}")

def corregir_nombre(nombre):
    correcciones = {
        "DanielaLancheros": "Daniela Lancheros",
        "EdwinMiranda": "Edwin Miranda",
        "LuisaReyes": "Luisa Reyes",
        "MayerlyAcero": "Mayerly Acero",
        "NancyMoreno": "Nancy Moreno",
        "NicolasTovar": "Nicolas Tovar",
        "johan": "Johan",
        "NoseEntiendelenombredelasesor": "Desconocido",
        "NoSeEscucha": "Desconocido",
        "NotieneNombre": "Desconocido"
    }
    nombre_str = str(nombre).strip() if pd.notna(nombre) else ''
    return correcciones.get(nombre_str, nombre_str)


# ========================================
# === GR√ÅFICAS ===========================
# ========================================
def graficar_puntaje_total(df):
    if df is None or df.empty or 'asesor' not in df.columns or 'puntaje_total' not in df.columns:
        st.warning("‚ö†Ô∏è Datos incompletos para la gr√°fica de puntaje total.")
        return
    df['asesor'] = df['asesor'].apply(corregir_nombre)    
    df['puntaje_total'] = pd.to_numeric(df['puntaje_total'], errors='coerce')
    df_cleaned = df.dropna(subset=['asesor', 'puntaje_total'])
    if df_cleaned.empty:
        st.warning("‚ö†Ô∏è No hay datos v√°lidos de asesor o puntaje total para graficar.")
        return
    fig = px.bar(
        df_cleaned.sort_values("puntaje_total", ascending=False),
        x="asesor",
        y="puntaje_total",
        text="puntaje_total",
        color="puntaje_total",
        color_continuous_scale="Greens",
        title="üéØ Puntaje Total Ponderado por Asesor",
        labels={"puntaje_total": "Puntaje Total Ponderado", "asesor": "Asesor"}
    )
    fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
    fig.update_layout(
        height=700, # Misma altura para todas las gr√°ficas
        xaxis_tickangle=-45, plot_bgcolor="white",
        font=dict(family="Arial", size=12), # Tama√±o de fuente original del c√≥digo proporcionado
        title_x=0.5
    )
    # --- Inicia Gr√°fico: Puntaje Total ---
    st.plotly_chart(fig, use_container_width=True)
    # --- Fin Gr√°fico: Puntaje Total ---


def graficar_asesores_metricas_heatmap(df):
    if df is None or df.empty or 'asesor' not in df.columns:
        st.warning("‚ö†Ô∏è Datos incompletos o faltan columnas necesarias ('asesor') para la gr√°fica heatmap.")
        return
    metric_cols = [col for col in df.columns if '%' in col]
    if not metric_cols:
        st.warning("‚ö†Ô∏è No se encontraron columnas con '%' en el DataFrame para graficar el heatmap.")
        st.info(f"üìã Columnas disponibles: {df.columns.tolist()}")
        return
    df['asesor'] = df['asesor'].apply(corregir_nombre)       
    df_heatmap_data = df[['asesor'] + metric_cols].copy()
    df_heatmap_data = df_heatmap_data.set_index('asesor')
    df_heatmap_data = df_heatmap_data.apply(pd.to_numeric, errors='coerce').fillna(0)
    if df_heatmap_data.empty:
        st.warning("‚ö†Ô∏è Despu√©s de limpiar, el DataFrame para el heatmap est√° vac√≠o.")
        return
    fig = go.Figure(data=go.Heatmap(
        z=df_heatmap_data.values, x=df_heatmap_data.columns, y=df_heatmap_data.index,
        colorscale='Greens',
        colorbar=dict(title=dict(text="Valor (%)", font=dict(size=24)), tickfont=dict(size=24)), # Corregido sintaxis, mantiene tama√±o original
        hovertemplate='Asesor: %{y}<br>M√©trica: %{x}<br>Valor: %{z:.2f}%<extra></extra>'
    ))
    fig.update_layout(
        title="Heatmap: Asesor vs. M√©tricas con Porcentaje (%)",
        xaxis_title="M√©trica (%)", yaxis_title="Asesor",
        font=dict(family="Arial", size=12), # Tama√±o de fuente original del c√≥digo proporcionado
        height=700, # Misma altura para todas las gr√°ficas
        title_x=0.5, plot_bgcolor='white'
    )
    # --- Inicia Gr√°fico: Heatmap M√©tricas ---
    st.plotly_chart(fig, use_container_width=True)
    # --- Fin Gr√°fico: Heatmap M√©tricas ---


def graficar_polaridad_subjetividad_gauges(df):
    if df is None or df.empty:
        st.warning("‚ö†Ô∏è El DataFrame de Sentimientos est√° vac√≠o o no fue cargado correctamente para los gauges.")
        return
    if 'polarity' not in df.columns:
         st.error("‚ùå El DataFrame de Sentimientos no contiene la columna 'polarity' necesaria para el gauge de polaridad.")
         st.info(f"üìã Columnas disponibles: {df.columns.tolist()}")
         has_polarity = False
    else:
         has_polarity = True
    if 'subjectivity' not in df.columns:
        st.warning("‚ö†Ô∏è El DataFrame de Sentimientos no contiene la columna 'subjectivity'. El gauge de subjetividad no se mostrar√°.")
        st.info(f"üìã Columnas disponibles: {df.columns.tolist()}")
        has_subjectivity = False
    else:
         has_subjectivity = True
    if not has_polarity and not has_subjectivity:
         st.error("‚ùå No hay columnas v√°lidas ('polarity', 'subjectivity') en el DataFrame de Sentimientos para generar ning√∫n gauge.")
         return

    if has_polarity:
        df['asesor'] = df['asesor'].apply(corregir_nombre)   
        df['polarity'] = pd.to_numeric(df['polarity'], errors='coerce')
        polaridad_total = df['polarity'].mean()
        if pd.isna(polaridad_total): polaridad_total = 0
    else: polaridad_total = 0

    if has_subjectivity:
        df['asesor'] = df['asesor'].apply(corregir_nombre)   
        df['subjectivity'] = pd.to_numeric(df['subjectivity'], errors='coerce')
        subjetividad_total = df['subjectivity'].mean()
        if pd.isna(subjetividad_total): subjetividad_total = 0.5
    else: subjetividad_total = 0.5

    col1, col2 = st.columns(2)

    # --- Inicia Gr√°fico: Gauges Sentimiento General ---
    if has_polarity:
        with col1:
            df['asesor'] = df['asesor'].apply(corregir_nombre)   
            fig_polaridad = go.Figure(go.Indicator(
                mode="gauge+number", value=polaridad_total,
                gauge=dict(
                    axis=dict(range=[-1, 1]), # Configuraci√≥n original de axis
                    bar=dict(color='darkgreen'), # Color original de la barra
                    steps=[
                        # PASOS Y COLORES ESPECIFICADOS POR TI AHORA para Polaridad
                        {'range': [-1, -0.3], 'color': '#c7e9c0'},
                        {'range': [-0.3, 0.3], 'color': '#a1d99b'},
                        {'range': [0.3, 1], 'color': '#31a354'}
                    ],
                    threshold={'line': {'color': "red", 'width': 4}, 'thickness': 0.75,'value': 0 }
                ),
                title={'text': "Polaridad Promedio General", 'font': {'size': 18}}, # Tama√±o de fuente original
                number={'font': {'size': 24}} # Tama√±o de fuente original
            ))
            fig_polaridad.update_layout(
                 height=700, # Misma altura para todas las gr√°ficas
                 margin=dict(l=10, r=10, t=40, b=10),
                 font=dict(family="Arial", size=12) # Tama√±o de fuente base original
            )
            st.plotly_chart(fig_polaridad, use_container_width=True)
    else:
         with col1: st.info("Gauge de Polaridad no disponible.")

    if has_subjectivity:
        with col2:
            fig_subjetividad = go.Figure(go.Indicator(
                mode="gauge+number", value=subjetividad_total,
                gauge=dict(
                    # --- CORRECCI√ìN DE SINTAXIS AQU√ç (axis definition) ---
                    axis=dict(range=[0, 1]), # Corregido sintaxis, configuraci√≥n original
                    # --- FIN CORRECCI√ìN ---
                    bar={'color': 'darkblue'}, # Color original de la barra de subjetividad
                    steps=[
                         # Pasos y colores originales del gauge de subjetividad (del c√≥digo que me diste antes de la confusi√≥n de colores)
                         {'range': [0.0, 0.3], 'color': '#e5f5e0'},
                         {'range': [0.3, 0.7], 'color': '#a1d99b'},
                         {'range': [0.7, 1.0], 'color': '#31a354'}
                    ],
                    threshold={'line': {'color': "red", 'width': 4}, 'thickness': 0.75,'value': 0.5}
                ),
                title={'text': "Subjetividad Promedio General", 'font': {'size': 18}}, # Tama√±o de fuente original
                number={'font': {'size': 24}} # Tama√±o de fuente original
            ))
            fig_subjetividad.update_layout(
                 height=700, # Misma altura para todas las gr√°ficas
                 margin=dict(l=10, r=10, t=40, b=10),
                 font=dict(family="Arial", size=12) # Tama√±o de fuente base original
            )
            st.plotly_chart(fig_subjetividad, use_container_width=True)
    else:
         with col2: st.info("Gauge de Subjetividad no disponible.")
    # --- Fin Gr√°fico: Gauges Sentimiento General ---


import streamlit as st
import pandas as pd
import plotly.express as px

def graficar_polaridad_por_asesor_barras_horizontales(df):
    if df is None or df.empty:
        st.warning("‚ö†Ô∏è El DataFrame para la gr√°fica de Polaridad est√° vac√≠o o no fue cargado correctamente.")
        return
    if 'asesor' not in df.columns or 'polarity' not in df.columns:
        st.error("‚ùå El DataFrame no contiene las columnas necesarias: 'asesor' y 'polarity'.")
        st.info(f"üìã Columnas disponibles: {df.columns.tolist()}")
        return

    # Corregir nombres de asesores y convertir a num√©rico
    df['asesor'] = df['asesor'].apply(corregir_nombre)
    df['polarity'] = pd.to_numeric(df['polarity'], errors='coerce')
    df_cleaned = df.dropna(subset=['asesor', 'polarity'])

    if df_cleaned.empty:
        st.warning("‚ö†Ô∏è No hay datos v√°lidos para graficar.")
        return

    # Agrupar por asesor y calcular promedio de polaridad
    df_polaridad_avg = df_cleaned.groupby('asesor', as_index=False)['polarity'].mean()
    df_polaridad_avg = df_polaridad_avg.sort_values('polarity', ascending=True)

    # Crear gr√°fico de barras verticales
    fig = px.bar(
        df_polaridad_avg,
        x='asesor',
        y='polarity',
        title='Polaridad Promedio por Asesor',
        labels={'polarity': 'Polaridad Promedio', 'asesor': 'Asesor'},
        color_discrete_sequence=['green']
    )

    # Ajustes de layout
    fig.update_layout(
        yaxis_range=[-1, 1],
        xaxis_title="Asesor",
        yaxis_title="Polaridad Promedio",
        plot_bgcolor="White",
        height=700,
        font=dict(family="Arial", size=12),
        title_x=0.5
    )

    st.plotly_chart(fig, use_container_width=True)
# ========================================
# === ANALISIS DETALLADO POR ASESOR (ACORDEONES) ===
# ========================================
def mostrar_acordeones(df):
    # Validamos que el DataFrame no est√© vac√≠o ni sea None
    if df is None or df.empty:
        st.warning("‚ö†Ô∏è El DataFrame est√° vac√≠o o no fue cargado correctamente.")
        return

    # Obtenemos la lista √∫nica de asesores presentes en la columna 'asesor'
    asesores = df['asesor'].unique()

    # Iteramos por cada asesor
    for asesor in asesores:
        # Filtramos las filas del DataFrame que pertenecen al asesor actual
        df_asesor = df[df['asesor'] == asesor]

        # OMITIMOS LA VISUALIZACI√ìN CON EXPANDER PARA QUE NO SE MUESTRE
        # En vez de usar st.expander, simplemente no mostramos nada

        # Esta parte del c√≥digo queda funcional pero oculta
        for i, fila in df_asesor.iterrows():
            #st.markdown("---")  # L√≠nea divisoria entre llamadas

            # Iteramos por cada columna del DataFrame (excepto 'asesor')
            for columna in df.columns:
                if columna == 'asesor':
                    continue  # Saltamos la columna 'asesor'

                # Obtenemos el valor de esta columna para la fila actual
                valor = fila[columna]
                try:
                    # Intentamos convertir el valor a entero
                    valor_int = int(valor)

                    # Verificamos si cumple con el m√≠nimo (al menos 1)
                    estado = "‚úÖ" if valor_int >= 1 else "‚ùå"

                    # Mostramos la categor√≠a, el valor y el estado
                    # Esta l√≠nea es la que normalmente mostrar√≠a contenido
                    # st.markdown(f"üîπ {columna}: {valor_int} {estado} (m√≠nimo 1)")
                except:
                    # Si el valor no es num√©rico, lo mostramos tal cual
                    # st.markdown(f"üîπ {columna}: {valor}")
                    pass


#000000000000000000000000000000000000000
#0000000 acordeon Yesid
##################################

# ========================================
# === ANALISIS DETALLADO POR ASESOR (ACORDEONES) ===
# ========================================
# Aseg√∫rate de que la funci√≥n corregir_nombre est√© definida antes en el script
# Aseg√∫rate de que las importaciones principales (pandas, streamlit) est√©n al inicio del script
# Si prefieres importar dentro de la funci√≥n, mant√©n las l√≠neas de importaci√≥n aqu√≠

import streamlit as st
import pandas as pd

def mostrar_acordeones_simple(df):
    if df is None or df.empty:
        st.warning("‚ö†Ô∏è El DataFrame est√° vac√≠o o no fue cargado correctamente.")
        return
    if 'asesor' not in df.columns:
        st.error("‚ùå El DataFrame no contiene la columna 'asesor'.")
        return

    st.markdown("### üîç Detalle Completo por Asesor")

    df['asesor'] = df['asesor'].astype(str)
    unique_asesores = df['asesor'].dropna().unique()

    for nombre_asesor in unique_asesores:
        df_asesor = df[df['asesor'] == nombre_asesor]

        with st.expander(f"üßë Detalle de: **{nombre_asesor}**"):
            for index, row in df_asesor.iterrows():
                filename = row.get('archivo', 'Archivo desconocido')
                st.write(f"Analizando: **{filename}**")

                # Detectar autom√°ticamente las columnas *_conteo
                columnas_conteo = [col for col in df.columns if col.endswith('_conteo')]

                for col in columnas_conteo:
                    categoria = col.replace('_conteo', '')
                    conteo = row.get(col, 'N/A')

                    # Mostrar ‚úÖ o ‚ùå basado en conteo
                    cumple = '‚úÖ' if pd.notna(conteo) and conteo >= 1 else '‚ùå'
                    st.write(f"  üîπ {categoria.replace('_', ' ').capitalize()}: {conteo} {cumple} (m√≠nimo 1)")

                # Mostrar puntaje y resultado final
                puntaje = row.get('puntaje_final_%', None)
                if pd.notna(puntaje):
                    resultado = 'Llamada efectiva' if puntaje >= 80 else 'No efectiva'
                    emoji = '‚úÖ' if puntaje >= 80 else '‚ùå'
                    st.write(f"üéØ Resultado: {emoji} {resultado} ‚Äî Puntaje: {puntaje:.1f}%")
                else:
                    st.write("üéØ Resultado: ? Resultado desconocido ‚Äî Puntaje: N/A")

                if len(df_asesor) > 1 and index < len(df_asesor) - 1:
                    st.markdown("---")
                    #############nuevo acordeon 

# ========================================
# === FUNCI√ìN PRINCIPAL STREAMLIT =======
# ========================================
def main():

    # --- Inicia Titulo de la Aplicaci√≥n (Letra M√°s Grande) ---
    st.title("üìä Reporte de Llamadas y Sentimiento por Asesor")
    # --- Fin Titulo de la Aplicaci√≥n ---

    insetCodigo()

    # --- Separa un grafico ---
    st.markdown("---")
    # --- Fin separaci√≥n ---

    # --- Inicia secci√≥n Gr√°ficos Resumen (Letra M√°s Grande) ---
    st.header("üìà Gr√°ficos Resumen")
    # --- Fin secci√≥n Gr√°ficos Resumen ---

    # --- Inicia Gr√°fico: Puntaje Total ---
    graficar_puntaje_total(df_puntajeAsesores)
    # --- Fin Gr√°fico: Puntaje Total ---

    # --- Separa un grafico ---
    st.markdown("---")
    # --- Fin separaci√≥n ---

    # --- Inicia Gr√°fico: Heatmap M√©tricas ---
    graficar_asesores_metricas_heatmap(df_puntajeAsesores)
    # --- Fin Gr√°fico: Heatmap M√©tricas ---

    # --- Separa un grafico ---
    st.markdown("---")
    # --- Fin separaci√≥n ---

    # --- Inicia Gr√°fico: Gauges Sentimiento General ---
    graficar_polaridad_subjetividad_gauges(df_POlaVssub)
    # --- Fin Gr√°fico: Gauges Sentimiento General ---

    # --- Separa un grafico ---
    st.markdown("---")
    # --- Fin separaci√≥n ---
    graficar_polaridad_por_asesor_barras_horizontales(df_resumen)



    # --- Separa un grafico ---
    st.markdown("---")
    # --- Fin separaci√≥n ---

    # --- Inicia secci√≥n Detalle por Asesor ---
    mostrar_acordeones(df_acordeon)
    # --- Fin secci√≥n Detalle por Asesor ---
    mostrar_acordeones_simple(df_acordeon)


# ========================================
# === EJECUCI√ìN DEL PROGRAMA ============
# ========================================
if __name__ == '__main__':
    main()
